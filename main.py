import logging
import re
import locale
from beeline_api_errors import *
from keyboards import *
from utils import *

from beeline_api import BeelineAPI, BeelineNumber, BeelineUser
from config_secrets import *
from telegram import Update, ReplyKeyboardRemove
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    PicklePersistence,
    filters,
)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)
locale.setlocale(locale.LC_ALL, 'rus')

beelineAPI = BeelineAPI()
use_white_list = len(white_list) > 0
AUTHORIZE, TEST = range(2)


async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.\n\n'
                                    '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ä–∞–∑–¥–µ–ª:',
                                    reply_markup=main_menu_keyboard())


async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'beeline_user' in context.user_data:
        del context.user_data['beeline_user']
    return await start(update, context)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'beeline_user' in context.user_data:
        await show_main_menu(update, context)
        return
    user = update.message.from_user
    logger.info("start: %s: %s", user.first_name, update.message.text)
    if use_white_list and update.effective_chat.id not in white_list:
        return
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç\! –≠—Ç–æ –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –±–∏–ª–∞–π–Ω–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏\.  "
        "\n  "
        "\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ  \n"
        "üì±*–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞* –∏  üîí*–ø–∞—Ä–æ–ª—å* —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\.",
        parse_mode=ParseMode.MARKDOWN_V2,
        reply_markup=ReplyKeyboardRemove()
    )

    return AUTHORIZE


async def authorize(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if 'beeline_user' in context.user_data:
        await show_main_menu(update, context)
        return

    ctn, password = re.findall(r'(\d{10}) (.+)$', update.message.text)[0]
    logger.info("login: %s", update.message.text)
    try:
        token = beelineAPI.obtain_token(ctn, password)
    except InvalidResponse as e:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n\n" + e.value)
        return AUTHORIZE
    except StatusNotOK as e:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return AUTHORIZE

    new_number = BeelineNumber(ctn, password, token, "–û—Å–Ω–æ–≤–Ω–æ–π")
    if 'beeline_user' not in context.user_data:
        new_user = BeelineUser(new_number)
        context.user_data['beeline_user'] = new_user
    await show_main_menu(update, context)

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("cancel")

    return ConversationHandler.END


def call_func(context: ContextTypes.DEFAULT_TYPE, func):
    index_number = context.user_data['beeline_user'].current_number
    response, new_number = func(context.user_data['beeline_user'].numbers[index_number])

    context.user_data['beeline_user'].numbers[index_number] = new_number
    return response


async def show_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'beeline_user' not in context.user_data:
        return

    wait_msg = await update.message.reply_text(PLEASE_WAIT_MSG)
    response = call_func(context, beelineAPI.info_prepaidBalance)
    logger.info("info_prepaidBalance: %s: %s", update.message.from_user.first_name, response)
    billing_date_str = ''
    if response['balance'] > 0:
        result = f'üíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {"{0:.2f}".format(response["balance"]).rstrip("0").rstrip(".")} —Ä—É–±–ª–µ–π\n'
        if 'nextBillingDate' in response \
                and response['nextBillingDate'] is not None:
            date_reset = str_to_datetime(response["nextBillingDate"], "%Y-%m-%d")
            billing_date_str = str(date_reset.strftime('%d %B %Y'))
            result += f'–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è: {billing_date_str.lower()} –≥–æ–¥–∞\n'
        result += '\n'
    else:
        response = call_func(context, beelineAPI.info_availablePromisedPayment)
        logger.info("info_availablePromisedPayment: %s: %s", update.message.from_user.first_name, response)
        result = f'üíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {"{0:.2f}".format(response["amount"]).rstrip("0").rstrip(".")} —Ä—É–±–ª–µ–π\n\n'

    response = call_func(context, beelineAPI.info_accumulators)
    logger.info("info_accumulators: %s: %s", update.message.from_user.first_name, response)

    def format_unit_count(accumulator):
        unit = accumulator['unit']
        rest = accumulator['rest']
        size = None
        if 'size' in accumulator:
            size = accumulator['size']
        if unit == 'KBYTE':
            result = format_bytes(rest, unit)
            if size is not None and size >= rest:
                result += ' –∏–∑ ' + format_bytes(size, unit)
            return result
        elif unit == 'SECONDS':
            result = str(rest // 60)
            if size is not None and size >= rest:
                result += ' –∏–∑ ' + str(size // 60)
            return result + " –º–∏–Ω—É—Ç"
        elif unit == 'SMS':
            result = str(rest)
            if size is not None and size >= rest:
                result += ' –∏–∑ ' + str(rest)
            return result + " —Å–º—Å"

        result = str(rest)
        if size is not None and size >= rest:
            result += ' –∏–∑ ' + str(rest)
        return result

    def format_accumulator(accumulator):
        result = ''
        is_inet_unlim = 'soc' in accumulator \
                and accumulator['soc'] == 'SBL4P2_3' \
                and accumulator['unit'] == 'KBYTE'
        if is_inet_unlim:
            result = f'‚ôæÔ∏è –±–µ–∑–ª–∏–º–∏—Ç'
        elif 'rest' in accumulator:
            result = format_unit_count(accumulator)

        if accumulator['unit'] == 'KBYTE':
            result = f'üåé –ò–Ω—Ç–µ—Ä–Ω–µ—Ç: {result}\n'
        elif accumulator['unit'] == 'SECONDS':
            result = f'üìû –ú–∏–Ω—É—Ç—ã: {result}\n'
        elif accumulator['unit'] == 'SMS':
            result = f'‚úâÔ∏è SMS: {result}\n'
        else:
            result = f'üî¢ –û—Å—Ç–∞–ª–æ—Å—å: {result}\n'

        if 'isSpeedDown' in accumulator and accumulator['isSpeedDown']:
            result = 'üìâ ' + result
        if 'isSpeedUp' in accumulator and accumulator['isSpeedUp']:
            result = 'üìà ' + result
        if 'dateResetPacket' in accumulator and not is_inet_unlim:
            date_reset = str_to_datetime(accumulator['dateResetPacket'])
            date_str = str(date_reset.strftime('%d %B %Y'))
            if date_str != billing_date_str:
                result += f'–î–∞—Ç–∞ —Å–±—Ä–æ—Å–∞ –ø–∞–∫–µ—Ç–∞: {date_str.lower()} –≥–æ–¥–∞\n'
        #if 'sdbShare' in accumulator and accumulator['sdbShare']:
            #result += 'üë™ '
        #result += f'–ò—Å—Ç–æ—á–Ω–∏–∫: {accumulator["socName"]}\n'
        #result += f'–î–µ–π—Å—Ç–≤—É–µ—Ç: {accumulator["accName"]}'

        return result

    # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º '–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ä–æ—É–º–∏–Ω–≥–µ'
    accumulators = [n for n in response['accumulators'] if n['soc'] != 'ROAMGPRS']

    if len(accumulators) > 0:
        result += 'üìú –û—Å—Ç–∞—Ç–∫–∏ –ø–∞–∫–µ—Ç–æ–≤:\n'
    for accumulator in accumulators:
        result += format_accumulator(accumulator)

    await wait_msg.edit_text(result)


async def get_services(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if 'beeline_user' not in context.user_data:
        return

    wait_msg = await update.message.reply_text(PLEASE_WAIT_MSG)
    response = call_func(context, beelineAPI.info_serviceList)
    logger.info("get_services: %s: %s", update.message.from_user.first_name, response)

    def sort_by_name(service):
        return service['entityName']

    services = sorted(response['services'], key=sort_by_name)

    def format_service_line(service):
        if service['removeInd'] == 'Y':
            result = 'üü¢'
        else:
            result = 'üî¥'

        if 'rcRate' in service and service['rcRate'] > 0:
            result += f'üí∏Ô∏è –∑–∞ {service["rcRate"]} —Ä—É–±–ª–µ–π'
            if 'rcRatePeriodText' in service and service['rcRatePeriodText'] is not None:
                result += f' {service["rcRatePeriodText"]}'
            result += '\n'

        result += f' {service["entityName"].replace("  ", " ")}'
        if service['expDate'] is not None:
            exp_date = str_to_datetime(service['expDate'])
            date_str = str(exp_date.strftime('%d %B %Y'))
            result += f' (üìÖ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {date_str.lower()} –≥–æ–¥–∞)'
        if service["entityDesc"] is not None \
                and service["entityDesc"] != service["entityName"]:
            result += f'\n{service["entityDesc"].replace("  ", " ")}\n'
        return result + f'\n'

    visible_services = [n for n in services if n['viewInd'] == 'Y']
    hidden_services = [n for n in services if n['viewInd'] != 'Y']

    if len(visible_services) == 0 and len(hidden_services) == 0:
        result = '–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö —É—Å–ª—É–≥.'
    else:
        result = '–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:' \
                 '\nüü¢ - —É—Å–ª—É–≥—É –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ' \
                 '\nüî¥ - —É—Å–ª—É–≥—É –Ω–µ–ª—å–∑—è –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ\n\n'
        if len(visible_services) == 0:
            result += '–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∏–¥–∏–º—ã–µ —É—Å–ª—É–≥–∏.\n'
        else:
            result += 'üëÄüëÄ –í–∏–¥–∏–º—ã–µ —É—Å–ª—É–≥–∏: üëÄüëÄ\n'
            for service in visible_services:
                result += format_service_line(service)

        if len(hidden_services) == 0:
            result += '\n–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–∫—Ä—ã—Ç—ã–µ —É—Å–ª—É–≥–∏.'
        else:
            result += '\nüëªüëª –°–∫—Ä—ã—Ç—ã–µ —É—Å–ª—É–≥–∏: üëªüëª\n'
            for service in hidden_services:
                result += format_service_line(service)

    await wait_msg.edit_text(result)


async def check_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if 'beeline_user' not in context.user_data:
        return

    # —É—Å–ª—É–≥–∏ - –Ω–∞–ª–∏—á–∏–µ '–ø–ª–æ—Ö–∏—Ö' –∏ –ø–ª–∞—Ç–Ω—ã—Ö, —Å–æ–≤–µ—Ç –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –ø–æ–ª–µ–∑–Ω—ã—Ö
    wait_msg = await update.message.reply_text(PLEASE_WAIT_MSG)
    response = call_func(context, beelineAPI.info_serviceList)
    logger.info("get_services: %s: %s", update.message.from_user.first_name, response)
    result = ''

    def sort_by_name(service):
        return service['entityName']

    #services = sorted(response['services'], key=sort_by_name)
    services = {}
    for i in response['services']:
        services[i['name']] = {
            'entityName': i['entityName']
        }
        if 'rcRate' in i:
            services[i['name']]['rcRate'] = int(i['rcRate'])
        else:
            services[i['name']]['rcRate'] = 0
        if 'rcRatePeriodText' in i:
            services[i['name']]['rcRatePeriodText'] = i['rcRatePeriodText']

    for soc, description in services.items():
        if soc in BAD_SERVICES:
            result += f'‚ùåüëéÔ∏è –í—Ä–µ–¥–Ω–∞—è —É—Å–ª—É–≥–∞: {description["entityName"]}\n'
        if description["rcRate"] > 0:
            result += f'‚ùåüí∏Ô∏è –ü–ª–∞—Ç–Ω–∞—è —É—Å–ª—É–≥–∞: {description["entityName"]} ' \
                      f'–∑–∞ <u>{description["rcRate"]} —Ä—É–±–ª–µ–π'
            if description['rcRatePeriodText'] is not None:
                result += f' {description["rcRatePeriodText"]}'
            result += f'</u>\n'

    if result == '':
        result = '‚úÖÔ∏è –í—Ä–µ–¥–Ω—ã—Ö –∏–ª–∏ –ø–ª–∞—Ç–Ω—ã—Ö —É—Å–ª—É–≥ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!\n'

    test_services = GOOD_SERVICES.copy()
    for soc, description in services.items():
        if soc in test_services.keys():
            del test_services[soc]

    if len(test_services) > 0:
        result += 'üí° –°–æ–≤–µ—Ç—É—é –ø–æ–¥–∫–ª—é—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:\n'
        for service in test_services.values():
            result += '‚ó¶ ' + service['entityName']
            if 'http' in service['how_to']:
                result += f'\nüåé <a href="{service["how_to"]}">–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ª—É–≥–∏ –≤ –±–∏–ª–∞–π–Ω–µ</a>'
            else:
                result += f'\nüìû <code>{service["how_to"]}</code>'
            result += '\n\n'


    # –ø–æ–¥–ø–∏—Å–∫–∏ - –Ω–∞–ª–∏—á–∏–µ
    response = call_func(context, beelineAPI.info_subscriptions)
    logger.info("get_subscriptions: %s: %s", update.message.from_user.first_name, response)

    subscriptions = response['subscriptions']
    if len(subscriptions) == 0:
        result += '‚úÖÔ∏è –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!\n'
    else:
        result += '‚ùåÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏:\n'
        for subscription in subscriptions:
            result += subscription['name'] + '\n'

    # —Å—á—ë—Ç—á–∏–∫–∏ - –Ω–∞–ª–∏—á–∏–µ —Ñ–ª–∞–≥–∞ –∑–∞–º–µ–¥–ª–µ–Ω–∏—è
    response = call_func(context, beelineAPI.info_accumulators)
    logger.info("get_accumulators: %s: %s", update.message.from_user.first_name, response)

    accumulators = [n for n in response['accumulators'] if n['soc'] != 'ROAMGPRS']
    is_slowed = False
    for accumulator in accumulators:
        if 'isSpeedDown' in accumulator and accumulator['isSpeedDown']:
            if accumulator['unit'] == 'KBYTE':
                result += '‚ùåÔ∏è –°—á—ë—Ç—á–∏–∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ —Å —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é\n'
            else:
                result += '‚ùåÔ∏è –ò–º–µ–µ—Ç—Å—è —Å—á—ë—Ç—á–∏–∫ —Å —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é\n'

    if not is_slowed:
        result += '‚úÖÔ∏è –ó–∞–º–µ–¥–ª–µ–Ω–Ω—ã–µ —Å—á—ë—Ç—á–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!\n'

    await wait_msg.edit_text(result, parse_mode=ParseMode.HTML)


async def get_pricePlan(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if 'beeline_user' not in context.user_data:
        return

    wait_msg = await update.message.reply_text(PLEASE_WAIT_MSG)
    response = call_func(context, beelineAPI.info_pricePlan)
    logger.info("get_pricePlan: %s: %s", update.message.from_user.first_name, response)

    price_plan = response['pricePlanInfo']
    result = f"""–ù–∞–∑–≤–∞–Ω–∏–µ: {price_plan['entityName']}
{price_plan['entityDesc']}

"""
    if 'rcRatePeriodText' in price_plan and int(price_plan['rcRate']) > 0:
        result += f"üíµ –ê–±–æ–Ω–µ–Ω—Ç—Å–∫–∞—è –ø–ª–∞—Ç–∞: {int(price_plan['rcRate'])} {price_plan['rcRatePeriodText']}\n"
    else:
        result += f"ü§ë –ë–µ–∑ –∞–±–æ–Ω–µ–Ω—Ç—Å–∫–æ–π –ø–ª–∞—Ç—ã\n"
    if price_plan['expDate'] is not None:
        exp_date = str_to_datetime(price_plan['expDate'])
        date_str = str(exp_date.strftime('%d %B %Y'))
        result += f'üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {date_str.lower()} –≥–æ–¥–∞)\n'

    await wait_msg.edit_text(result)


async def show_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        repr(context.user_data['beeline_user'])
    )

if __name__ == '__main__':
    persistence = PicklePersistence(filepath="beeline_data.pickle", update_interval=5)
    application = ApplicationBuilder().token(tg_bot_token).persistence(persistence).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start), CommandHandler("restart", restart)],
        states={
            AUTHORIZE: [MessageHandler(
                filters.Regex(r'(\d{10}) (.+)$'), authorize)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        name="main_conversation",
        persistent=True
    )

    application.add_handler(conv_handler)

    application.add_handler(MessageHandler(filters.Regex('üì± –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'), show_info))
    application.add_handler(MessageHandler(filters.Regex('‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä'), check_number))
    application.add_handler(MessageHandler(filters.Regex('üìñ –¢–∞—Ä–∏—Ñ'), get_pricePlan))
    application.add_handler(MessageHandler(filters.Regex('üîé –£—Å–ª—É–≥–∏'), get_services))

    application.run_polling()
